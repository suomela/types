#!/usr/bin/env python

import sys
sys.path.append('bin')
import TypesDatabase as TD

DATASET = 'location'
DATASET_DESCR = 'Conference locations'
COLLECTIONS = [
    ('area', ['international']),
]
VARIANTS = [
    [ 'dblp-conference-symposium-workshop',  ['conference', 'symposium', 'workshop'] ],
    [ 'dblp-conference-symposium',           ['conference', 'symposium'] ],
    [ 'dblp-workshop',                       ['workshop'] ],
    [ 'dblp-acm-ieee',                       ['ACM', 'IEEE'] ],
    [ 'dblp-europe-asia',                    ['Europe', 'Asia'] ],
]

def pattern(word):
    return '%' + word + '%'

def setup(conn):

    # More descriptive labels

    conn.executescript('''
        INSERT OR REPLACE INTO label (labelcode, labeltext) VALUES ('type', 'locations');
        INSERT OR REPLACE INTO label (labelcode, labeltext) VALUES ('token', 'meetings');
        INSERT OR REPLACE INTO label (labelcode, labeltext) VALUES ('hapax', 'one-time locations');
        INSERT OR REPLACE INTO label (labelcode, labeltext) VALUES ('word', 'conference series');
    ''')

    ### What to compute

    conn.executescript('''
        INSERT OR IGNORE INTO defaultstat (statcode) VALUES ('type-word');
        INSERT OR IGNORE INTO defaultstat (statcode) VALUES ('type-token');
        INSERT OR IGNORE INTO defaultstat (statcode) VALUES ('token-word');
    ''')

def create(conn, i, variant):

    corpus, kind = variant
    names = ', '.join(kind[:-1]) + ' or ' + kind[-1]
    corpus_descr = 'DBPL, sample = conference series, event name contains ' + names

    ### Some simple filtering

    tmp = 'tmp_conf_%d' % i
    sql = '''
        CREATE TEMPORARY TABLE %s AS
        SELECT confcode FROM conf WHERE 
    ''' % tmp + ' OR '.join([ 'confname LIKE ?' for word in kind ])
    pat = [ pattern(word) for word in kind ]
    conn.execute(sql, pat)

    ### Corpus

    TD.delete_corpus(conn, corpus)
    TD.create_corpus(conn, corpus, corpus_descr)

    ### Sample = conference series

    conn.execute('''
        INSERT INTO sample (corpuscode, samplecode, wordcount, description)
        SELECT ?, confcode, 1, confname
        FROM conf JOIN %s USING (confcode)
        ORDER BY confcode
    ''' % tmp, (corpus,))

    ### One dataset

    conn.execute('''
        INSERT INTO dataset (corpuscode, datasetcode, description) VALUES (?, ?, ?)
    ''', (corpus, DATASET, DATASET_DESCR))

    ### Token = event

    conn.execute('''
        INSERT INTO token (corpuscode, samplecode, datasetcode, tokencode, tokencount)
        SELECT ?, confcode, ?, place, COUNT(0)
        FROM conf_year JOIN %s USING (confcode)
        GROUP BY confcode, place
    ''' % tmp, (corpus, DATASET))

    ### Collections formed from the conference title

    if len(kind) > 1:
        coll = COLLECTIONS + [['name', kind]]
    else:
        coll = COLLECTIONS

    for group, words in coll:
        for word in words:
            coll = word
            descr = 'Conference name contains "%s"' % word
            TD.create_collection(conn, corpus, group, coll, descr)
            conn.execute('''
                INSERT INTO sample_collection (corpuscode, samplecode, collectioncode)
                SELECT ?, confcode, ?
                FROM conf JOIN %s USING (confcode)
                WHERE confname LIKE ? ORDER BY confcode
            ''' % tmp, (corpus, coll, pattern(word)))

def main():
    conn = TD.open_db()
    TD.create_if_needed(conn)
    setup(conn)
    for i, variant in enumerate(VARIANTS):
        create(conn, i, variant)
    conn.commit()

main()
